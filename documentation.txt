Login: connect() is called from helpers.py, a file containing a number of small methods used throughout the 
program. Connect prompts the user for their sqlplus username and password and connects them to the server at
gwynne.cs.ualberta.ca:1521/CRS. 

Main Menu:
The user is presented with a main menu that allows them to select from one of five options relating to the database. 
The user enters a digit corresponding with the menu item they wish to do. An invalid response re-prompts the user.
The user is re-prompted anytime they enter an invalid menu choice throughout the program.

Menu options are:
1. New Vehicle Registration - Calls [ ] from newVehicleRegistration.py
2. Auto Transaction - Calls [ ] from [ ]
3. Driver Licence Registration - Calls [ ] from [ ]
4. Violation Record - Calls ticketInput() from violationRecord.py
5. Search Engine - Calls search() from search.py

Upon completion of executing any of the methods called from the main menu, the method will return back 
to the main menu such that the user can continue working with the database.

-----------------------------------------------------------------------------------------------------------------------
New Vehicle Registration:
This presents a menu such that a user can enter all of the information pertaining to 
a new vehicle, and input that data to the database.

Prompt user for Vehicle ID
	call digitAskLoop() from helpers, ensure duplicate VIN doesn't exist
Prompt user for vehicle maker
	call blankSpaceLoop() from helpers to ensure invalid Maker isn't entered
Prompt user for vehicle model
	call blankSpaceLoop() from helpers, ensure invalid model isn't entered
Prompt user for vehicle year
	call maxWidthDigitChecker from helpers, esnure valid year is entered
Prompt user for vehicle color
	call blankSpaceLoop() from helpers, ensure color is valid
Prompt user for vehicle type ID
	call digitNotInAskLoop from helpers, ensure vehicle type entered exists in database

Call insertVehicle() from helpers, insert a new vehicle into the vehicle table with 
Call makePerson() from helpers, which prompts the user to create a new owner.
 


-----------------------------------------------------------------------------------------------------------------------
Auto Transaction:
Prompt for transaction_id
	if in database, prompt user again
Prompt for seller_id
	if not in database, prompt to add person
prompt for buyer_id
	if not in database, prompt to add person
prompt for vehicle_id
	if not in database, prompt to add vehicle
prompt for date of sale, handle with date method
prompt for price, ensure is no more 999999999 (numeric(9,2))
-----------------------------------------------------------------------------------------------------------------------
Driver Licence Registration:

Presents users with an option to enter new driver licence information or return to main menu
Takes licence number, name, SIN, class, and photo. Reprompts user as specified before 
using the tryAgain method. 


-----------------------------------------------------------------------------------------------------------------------
Violation Record:
The user is presented with the option to begin entering a violation record, or to return 
to the main menu.
Prompt for SIN of issuing officer
	Calls sinExists from helpers
		If no officer, call tryAgain() to ask if they want to try again
			if yes, remprompt for SIN
			If no, return to main menu

Prompt for SIN of violating person
	calls sinExists from helpers	
		If SIN not in database, call tryAgain() to ask if they want to try again
			if yes, reprompt for SIN
			If no, return to main menu

Prompt for Vehicle Serial Number
	calls VINExists from helpers	
		If VIN not present in database, call tryAgain() to ask if they want to try again
			if yes, reprompt for VIN
			If no, return to main menu

Prompt for Type of violation
	calls InDB from helpers
		If violation type not in database, call tryAgain()
			If yes, reprompt for violation
			If no, return to main menu

Prompt for date of violation
	calls dateChecker from helpers, which reprompts for incorrect dates

Prompt for Location of Violation
	If Locations is more than 20 characters, call tryAgain()
		If yes, reprompt for Location
		If no, return to main menu

Prompt for description
	If description longer than 1024 characters, call tryAgain()
		if yes, reprompt for description
		if no, return to main menu

After all inputs are finished, appropriate parameters are passed into the insertTicket() function.
This function comes from helpers. It inserts the values into the people table via the 
InsertData() helper function and an appropriately formatted query.

Function tryAgain() prompts the user for a yes/no answer. If the user enters 
yes, the function returns true. If the user enters no, the function returns 
false. If the user enters invalid information, it asks them again.

-----------------------------------------------------------------------------------------------------------------------
Search Engine:
User is presented with a menu with four options, three of which are for searching info in the database

1. Licence Information
	1. Search by Licence Number
		calls printLicence()
			calls searchDB() from helpers
	2. Search by Name
		calls printLicence()
			calls searchDB() from helpers
2. Violation Records
	1. Search by Licence Number
		calls printViolation()
			calls searchDB() from helpers
	2. Search by SIN
		calls printViolation()
			calls searchDB() from helpers
3. Vehicle History
	calls printVehicleHistory()
		calls searchDB() from helpers
4. Return - returns to previous menu

When invalid options are entered, and invalid data is entered, the user is prompted to re-enter their data.
Licence information takes a licence number or name from the user, which is then passed to the appropriate
query. That query is passed to printLicence which passes it to SearchDB from helpers.py 
which in turn executes the query and returns the results to printLicence. 
PrintLicence iterates through the results, and prints the formatted output to the screen.

Violation Records and Vehicle history operate on the same principle with printViolation and 
printVehicleHistory respectively. Licence numbers, SINs and Vehicle Serial Numbers are passed to 
the appropriate queries, where they are executed by SearchDB() from helpers. The table results are 
returned, and then iterated through via the printViolation/printVehicleHistory functions 

-----------------------------------------------------------------------------------------------------------------------
helpers.py:
inDB() - takes a query, and returns whether values are present

digitAskLoop() takes a result, a string asking a question, and a corresponding 
function. The loop will ask the user the question, check their result against 
the inputted checking function, ensure that the result is a digit,  and will 
reprompt the user until an appropriate answer is
given. When the appropriate answer is given, the answer is returned.

digitNotInAskLoop() operates the same way as digitAskLoop(), except it will keep 
reprompting the user until the inputted function returns false

askLoop() operates the same way as digitAskLoop except it does not ensure that 
the provided result is a digit

maxWidthDigitChecker() takes a result, an ask string, and a max number size. 
It loops as long as the result is not a digit, or the length of the answer is not 
equal to the max number size. When the loop breaks it returns the result.

digitChecker() takes a result and a string, and loops as long as the result is 
not a digit. The loop prompts the user with a string to reset the value of the 
result. When the loop breaks the result is returned.

blankSpaceLoop() takes a result and a string. It operates the same as digitChecker 
except it checks to see if the result is composed entirely of spaces.

